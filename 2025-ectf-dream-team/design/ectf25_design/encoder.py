import argparse
import struct
import json


class Encoder:
    def __init__(self, secrets: bytes):
        """
        You **may not** change the arguments or returns of this function!

        :param secrets: Contents of the secrets file generated by
            ectf25_design.gen_secrets
        """
        # TODO: Parse the secrets data here. Ensure any pre-processing or key 
        # derivation (e.g., cryptographic keys) required for frame encoding is handled here.

        # Load the json of the secrets file
        secrets = json.loads(secrets)

        # Extract necessary data for encoding frames
        self.some_secrets = secrets["some_secrets"]

    def encode(self, channel: int, frame: bytes, timestamp: int) -> bytes:
        """The frame encoder function

        :param channel: 32b unsigned channel number
        :param frame: Frame to encode (max 64 bytes)
        :param timestamp: 64b timestamp for encoding
        :returns: The encoded frame, ready for transmission
        """
        # TODO: Perform encoding of frames using channel, timestamp, 
        # and any relevant data from the secrets. Implement encryption if needed.
        return struct.pack("<IQ", channel, timestamp) + frame


def main():
    """A test main to one-shot encode a frame

    This function is only for your convenience and will not be used in the final design.

    After pip-installing, you should be able to call this with:
        python3 -m ectf25_design.encoder path/to/test.secrets 1 "frame to encode" 100
    """
    parser = argparse.ArgumentParser(prog="ectf25_design.encoder")
    parser.add_argument(
        "secrets_file", type=argparse.FileType("rb"), help="Path to the secrets file"
    )
    parser.add_argument("channel", type=int, help="Channel to encode for")
    parser.add_argument("frame", help="Contents of the frame")
    parser.add_argument("timestamp", type=int, help="64b timestamp to use")
    args = parser.parse_args()

    encoder = Encoder(args.secrets_file.read())
    print(repr(encoder.encode(args.channel, args.frame.encode(), args.timestamp)))


if __name__ == "__main__":
    main()
